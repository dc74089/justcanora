"""
Django settings for justcanora project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import sys
from pathlib import Path

import pytz
from django.core.management.utils import get_random_secret_key
from django.utils import timezone

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DEBUG = not os.getenv("PROD", False)
DOCKER = os.getenv("DOCKER", False)

CURRENT_ACADEMIC_YEAR = "24/25"
CURRENT_SEMESTER = 2
NEWS_DAYS = [2, 3]

PERSONAL_SPOTIFY_PLAYLIST = "spotify:playlist:07kBXGSHyNVWmOtLV3j8B6"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if DOCKER and not DEBUG:
    key_loc = "/app/secret/secret.key"
    if not os.path.exists(key_loc):
        with open(key_loc, "w") as f:
            f.write(get_random_secret_key())
    with open(key_loc, "r") as f:
        try:
            SECRET_KEY = f.read()
        except IOError:
            SECRET_KEY = ""
elif DEBUG:
    SECRET_KEY = 'django-insecure-5x+1sy-167242m776=rdp8zy03f$y182*hj7bk9e172k7b*q2v'
else:
    SECRET_KEY = ''

ALLOWED_HOSTS = [
    'canorasclass.com',
    'tr.canora.us'
]

if DEBUG:
    ALLOWED_HOSTS.extend([
        '127.0.0.1',
        'localhost',
        "*",
    ])

BASE_URL = "http://localhost:8000" if DEBUG else "https://tr.canora.us"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'django.contrib.humanize',
    'sorl.thumbnail',
    'oauth2_provider',

    'app',
    'scavenger',
    'slides',
    'wrapped',
    'aitutor'
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'oauth2_provider.backends.OAuth2Backend',
]

OAUTH2_PROVIDER = {
    "PKCE_REQUIRED": False
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'app.middleware.prevent_cache.PreventCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'justcanora.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.spotify.nowplaying.context_processor',
                'aitutor.utils.context.context_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'justcanora.wsgi.application'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'

CRONJOBS = [
    ('30 23 * * *', 'app.tasks.cleanup.cleanup_null'),
    ('45 23 * * *', 'app.tasks.cleanup.cleanup_playlists'),
    ('0 0 * * 0', 'app.tasks.cleanup.clear_tokens'),
]

MARKDOWNIFY = {
    "default": {
        "MARKDOWN_EXTENSIONS": [
            "markdown.extensions.extra",
            "markdown.extensions.codehilite",
        ],
        "WHITELIST_TAGS": [
            "pre",
            "code",
            "span",
            "ul",
            "ol",
            "li",
            "p",
            "strong",
            "em",
            "hr",
            "h1", "h2", "h3", "h4", "h5", "h6",
            "br",
        ],
        "WHITELIST_ATTRS": [
            "class",
        ],
        "STRIP": False,
        "TAB_LENGTH": 2,
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if DOCKER:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'django',
            'USER': 'django',
            'PASSWORD': 'django',
            'HOST': 'mysql',
            'PORT': '3306',
            'charset': 'utf8mb4',
            'use_unicode': True,
            'OPTIONS': {
                'charset': 'utf8mb4'
            }
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'
EST = pytz.timezone("America/New_York")

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

if DOCKER:
    STATIC_ROOT = "/app/static"
    MEDIA_ROOT = "/app/media"
else:
    MEDIA_ROOT = "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
